<?xml version="1.0"?>
<root>
  <item>
    <q>adb启动app</q>
	<a>adb shell am start -W com.example.test/com.example.test.MainActivity</a>
  </item>
  
  <item>
    <q>addr2line</q>
	<a>D:\android\ndk\toolchains\arm-linux-androideabi-4.9\prebuilt\windows-x86_64\bin\arm-linux-androideabi-addr2line.exe -C -f -e F:\bigsinger\AndroidTestCase\trunk\app\src\obj\local\armeabi\libhooktest.so 0x001234</a>
  </item>
  
   <item>
    <q>path</q>
	<a>System.AppDomain.CurrentDomain.BaseDirectory
</a>
  </item>
    <item>
    <q>openurl</q>
	<a>System.Diagnostics.Process.Start("url");
	</a>
  </item>  
    <item>
    <q>vmp加固后，为什么还能反编译看到类？</q>
	<a>类的关键函数已经处理了，例如lauch activity，关键函数都已经native话，反编译不出来的
	</a>
  </item>  
    <item>
    <q>so没看出加密了？</q>
	<a>so只加固了自研的，以xx..so（挑选一个so）为例，用ida分析，其Exports函数全部为空。未加固前，所有 exports函数都是透明可见的。</a>
  </item>
  <item>
    <q>windows64位下系统文件提示找不到wow64</q>
	<a>
	    PVOID OldValue = NULL;
        Wow64DisableWow64FsRedirection(&amp;OldValue);
        if ( GetFileAttributes(stShortcut.strTarget)!=-1 ) {
            ShellExecute(NULL, &quot;open&quot;, stShortcut.strTarget, stShortcut.strParams, stShortcut.strStartPath, SW_NORMAL);
        }else{
            AfxMessageBox(&quot;目标文件不存在：\n&quot; + stShortcut.strTarget);
        }
        Wow64EnableWow64FsRedirection(TRUE);
	</a>
  </item>
  <item>
    <q>防模拟器功能</q>
	<a>有些APP（特别是游戏）不允许用户在模拟器中使用，因此需要提供该功能。
强度要求：APP加固后运行在以下模拟器中崩溃或者以接口的形式告知APP检测到了模拟器：海马玩模拟器，逍遥安卓模拟器，靠谱助手安卓模拟器，夜神安卓模拟器，腾讯手游助手，mumu模拟器，雷电模拟器，蓝叠模拟器，iTools模拟器，天天模拟器，51模拟器，新浪手游助手……
</a>
  </item>
  <item>
    <q>Windows端加固工具clienttool</q>
	<a>用于windows系统下的app加固，支持界面模式和命令行模式，下载地址：http://support.dun.163.com/android/api/#_6</a>
  </item>
  <item>
    <q>签名命名行代码jarsigner</q>
	<a>jarsigner -verify -verbose -certs [your_apk_path.apk]</a>
  </item>
  <item>
    <q>Python获取父目录</q>
	<a>
	def getparent(filepath):
    if not filepath:
        return None
    lsPath = os.path.split(filepath)
    if lsPath[1]:
        return lsPath[0]
    lsPath = os.path.split(lsPath[0])
    return lsPath[0]
	</a>
  </item>
  <item>
    <q>Python获取当前目录</q>
	<a>
	# 返回当前脚本的全路径，末尾不带\
	# 在使用os.path.join函数时，后面的路径也不能以\开头，例如：
	# os.path.join(getthispath(), 'tools\\tools.exe') ok
	# os.path.join(getthispath(), '\\tools\\tools.exe') not ok
	# 或者直接调用os.path.abspath(os.path.dirname(__file__))，例如在F:\osopen\studypython\Main.py中调用
	# 则返回F:\osopen\studypython（末尾不带\）；若调用os.path.dirname(__file__)则返回F:/osopen/studypython（末尾不带\）
	def getthispath():
		path = sys.path[0]
		#判断为脚本文件还是py2exe编译后的文件，如果是脚本文件，则返回的是脚本的目录，如果是py2exe编译后的文件，则返回的是编译后的文件路径
		if os.path.isdir(path):
			return path
		elif os.path.isfile(path):
			return os.path.split(path)[0]
	</a>
  </item>
  <item>
    <q>Python异常处理</q>
	<a>
	import traceback

	try:
    except:
        print(traceback.format_exc())
	</a>
  </item>
  <item>
    <q></q>
	<a></a>
  </item>
  <item>
    <q></q>
	<a></a>
  </item>
  <item>
    <q></q>
	<a></a>
  </item>
  <item>
    <q></q>
	<a></a>
  </item>
  <item>
    <q></q>
	<a></a>
  </item>
  <item>
    <q></q>
	<a></a>
  </item>
  <item>
    <q></q>
	<a></a>
  </item>
  <item>
    <q></q>
	<a></a>
  </item>
  <item>
    <q></q>
	<a></a>
  </item>
  <item>
    <q></q>
	<a></a>
  </item>
</root>